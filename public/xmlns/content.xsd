<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:analytics="https://mobile-content-api.cru.org/xmlns/analytics"
    xmlns:content="https://mobile-content-api.cru.org/xmlns/content"
    xmlns:training="https://mobile-content-api.cru.org/xmlns/training" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified" targetNamespace="https://mobile-content-api.cru.org/xmlns/content">

    <xs:import namespace="https://mobile-content-api.cru.org/xmlns/analytics" schemaLocation="analytics.xsd" />
    <xs:import namespace="https://mobile-content-api.cru.org/xmlns/training" schemaLocation="training.xsd" />

    <!-- region Value Definitions -->
    <xs:simpleType name="colorValue">
        <xs:restriction base="xs:string">
            <xs:pattern value="rgba\([0-9]{1,3},\s*[0-9]{1,3},\s*[0-9]{1,3},\s*([01]|0?\.[0-9]*)\)" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="imageScaleType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="fit">
                <xs:annotation>
                    <xs:documentation>Scale image to fit the UI size without cropping any of the image
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fill">
                <xs:annotation>
                    <xs:documentation>Scale image to completely fill the UI, cropping if necessary</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fill-x">
                <xs:annotation>
                    <xs:documentation>Scale image to match the width of the UI, cropping if necessary</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="fill-y">
                <xs:annotation>
                    <xs:documentation>Scale image to match the height of the UI, cropping if necessary
                    </xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="imageGravity">
        <xs:annotation>
            <xs:documentation>This type defines align attributes for how an image should be aligned before applying the
                scale type. It is possible to have 1 align type specified for each axis (e.g. "start top").
            </xs:documentation>
        </xs:annotation>
        <xs:list>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:enumeration value="center">
                        <xs:annotation>
                            <xs:documentation>The image should be centered in it's container.</xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="start">
                        <xs:annotation>
                            <xs:documentation>The start edge of the image should be aligned to the start edge of the
                                container. The start edge is the left edge if left to right languages, and right edge in
                                right to left languages.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="end">
                        <xs:annotation>
                            <xs:documentation>The end edge of the image should be aligned to the end edge of the
                                container. The end edge is the right edge if left to right languages, and left edge in
                                right to left languages.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="top">
                        <xs:annotation>
                            <xs:documentation>The top edge of the image should be aligned to the top edge of the
                                container.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="bottom">
                        <xs:annotation>
                            <xs:documentation>The bottom edge of the image should be aligned to the bottom edge of the
                                container.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:list>
    </xs:simpleType>

    <xs:simpleType name="textAlign">
        <xs:restriction base="xs:token">
            <xs:enumeration value="start" />
            <xs:enumeration value="end" />
            <xs:enumeration value="center" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="textStyle">
        <xs:restriction base="xs:token">
            <xs:enumeration value="bold" />
            <xs:enumeration value="italic" />
            <xs:enumeration value="underline" />
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="textStyles">
        <xs:list itemType="content:textStyle" />
    </xs:simpleType>

    <xs:simpleType name="uri">
        <xs:restriction base="xs:anyURI">
            <xs:pattern value="https?://.*" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="stateKey">
        <xs:restriction base="xs:token">
            <xs:pattern value="[a-zA-Z][a-zA-Z0-9_]*" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="eventIdsType">
        <xs:list>
            <xs:simpleType>
                <xs:restriction base="xs:token">
                    <xs:pattern value="[a-zA-Z0-9_\-]+" />
                    <xs:pattern value="followup:send" />
                    <xs:pattern value="state:[a-zA-Z][a-zA-Z0-9_]*">
                        <xs:annotation>
                            <xs:documentation>State event ids resolve to the value(s) stored in state for the specified
                                key.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:pattern>
                </xs:restriction>
            </xs:simpleType>
        </xs:list>
    </xs:simpleType>
    <xs:simpleType name="listener">
        <xs:restriction base="xs:token">
            <xs:pattern value="[a-zA-Z0-9_\-]+" />
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="listenersType">
        <xs:list itemType="content:listener" />
    </xs:simpleType>

    <xs:simpleType name="deviceType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="mobile">
                <xs:annotation>
                    <xs:documentation>This device type represents a native app on Android or iOS</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="android">
                <xs:annotation>
                    <xs:documentation>This device type represents a native app on Android</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="ios">
                <xs:annotation>
                    <xs:documentation>This device type represents a native app on iOS</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="web">
                <xs:annotation>
                    <xs:documentation>This device type represents a web browser</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="deviceTypes">
        <xs:annotation>
            <xs:documentation>A space separated list of device types</xs:documentation>
        </xs:annotation>
        <xs:list itemType="content:deviceType" />
    </xs:simpleType>
    <!-- endregion Value Definitions -->

    <!-- region Common Attributes -->
    <xs:attributeGroup name="baseAttributes">
        <xs:attribute name="version" type="xs:int" default="1">
            <xs:annotation>
                <xs:documentation>This attribute defines the version of a content element. Whenever there is a breaking
                    change made to a content element, the version of the element should be incremented. This will allow
                    older renderers to only render supported content elements. This will probably be coupled with a
                    fallback element to provide a backwards compatible version of the content older renderers can fall
                    back to.

                    Version History:
                    1: Base version, no backwards incompatible changes have been made yet.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="content:contentRestrictions" />
    </xs:attributeGroup>

    <xs:attributeGroup name="contentRestrictions">
        <xs:attribute name="restrictTo" type="content:deviceTypes">
            <xs:annotation>
                <xs:documentation>This attribute specifies that the element it is on is only rendered on the specified
                    device types. By default elements are rendered on all devices.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <!-- endregion Common Attributes -->

    <!-- element nodes -->
    <xs:element name="paragraph">
        <xs:annotation>
            <xs:documentation>Vertical stack of content with margin/padding on the top and bottom.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="1" maxOccurs="unbounded">
                <xs:group ref="content:elements" />
                <xs:group ref="content:fixedSpacerOnly" />
            </xs:choice>
            <xs:attribute name="fallback" type="xs:boolean" default="false">
                <xs:annotation>
                    <xs:documentation>When fallback is set to true this paragraph node should be treated by the renderer
                        as a fallback content node. This is meant to provide temporary transition support for the new
                        fallback mode before it is widely supported by deployed apps. This backwards compatibility is
                        scheduled for removal after December 2021.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attributeGroup ref="content:baseAttributes" />
        </xs:complexType>
    </xs:element>

    <xs:element name="tabs">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="tab" maxOccurs="3">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="label" type="content:textChild" />
                            <xs:element ref="analytics:events" minOccurs="0">
                                <xs:annotation>
                                    <xs:documentation>Analytics Events to trigger for a tab. The default trigger mode
                                        for tab analytics events is "selected".
                                    </xs:documentation>
                                </xs:annotation>
                            </xs:element>
                            <xs:choice minOccurs="0" maxOccurs="unbounded">
                                <xs:group ref="content:elements" />
                                <xs:group ref="content:fixedSpacerOnly" />
                            </xs:choice>
                        </xs:sequence>
                        <xs:attribute name="listeners" type="content:listenersType">
                            <xs:annotation>
                                <xs:documentation>event_ids that trigger this tab</xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="accordion">
        <xs:complexType>
            <xs:choice>
                <xs:element name="section" maxOccurs="unbounded">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="header" type="content:textChild" />
                            <xs:choice minOccurs="0" maxOccurs="unbounded">
                                <xs:group ref="content:elements" />
                                <xs:group ref="content:fixedSpacerOnly" />
                            </xs:choice>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="text">
        <xs:complexType>
            <xs:simpleContent>
                <xs:extension base="content:textType">
                    <xs:attribute name="start-image" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Defines an image to display to the "start" of this text node.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="start-image-size" default="40">
                        <xs:annotation>
                            <xs:documentation>Defines the size in "density-independent pixels"/"points" of the start
                                image. This defaults to 40.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:int">
                                <xs:pattern value="[1-9][0-9]*" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="end-image" type="xs:string">
                        <xs:annotation>
                            <xs:documentation>Defines an image to display to the "end" of this text node.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="end-image-size" default="40">
                        <xs:annotation>
                            <xs:documentation>Defines the size in "density-independent pixels"/"points" of the end
                                image. This defaults to 40.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:int">
                                <xs:pattern value="[1-9][0-9]*" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attributeGroup ref="content:baseAttributes" />
                </xs:extension>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="textType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="i18n-id" type="xs:string">
                    <xs:annotation>
                        <xs:documentation>Defines the OneSky translation id for this text.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="text-align" type="content:textAlign" use="optional">
                    <xs:annotation>
                        <xs:documentation>Defines the alignment of the text. This defaults to start.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="text-color" type="content:colorValue">
                    <xs:annotation>
                        <xs:documentation>Defines the color of the text. This defaults to the text-color of the closest
                            ancestor container unless otherwise specified.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="text-scale" type="xs:float" default="1.0">
                    <xs:annotation>
                        <xs:documentation>Defines how much to scale the font size by. This defaults to 1.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="text-style" type="content:textStyles" default="">
                    <xs:annotation>
                        <xs:documentation>Defines any typeface styles to apply to this text content.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="textChild">
        <xs:sequence>
            <xs:element name="text" type="content:textType" />
        </xs:sequence>
    </xs:complexType>

    <xs:element name="image">
        <xs:annotation>
            <xs:documentation>This is an image content element. The image is rendered with a width matching the width of
                whatever container it is contained in. This is done to provide the most consistent image size experience
                across devices of varying screen sizes and densities.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="resource" type="xs:string" use="required" />
            <xs:attribute name="events" type="content:eventIdsType">
                <xs:annotation>
                    <xs:documentation>This attribute defines the events to trigger when the user "clicks" the image.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attributeGroup ref="content:baseAttributes" />
        </xs:complexType>
    </xs:element>

    <xs:element name="video">
        <xs:annotation>
            <xs:documentation>This is a video content element. The video will be renderer with a width matching the
                width of whatever container it is contained in.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="provider" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="youtube">
                            <xs:annotation>
                                <xs:documentation>YouTube video.</xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="video-id" type="xs:string" use="required" />
            <xs:attributeGroup ref="content:baseAttributes" />
        </xs:complexType>
    </xs:element>

    <xs:element name="animation">
        <xs:complexType>
            <xs:attribute name="resource" type="xs:string" use="required" />
            <xs:attribute name="autoplay" type="xs:boolean" default="true" />
            <xs:attribute name="loop" type="xs:boolean" default="true" />
            <xs:attribute name="events" type="content:eventIdsType">
                <xs:annotation>
                    <xs:documentation>This attribute defines the events to trigger when the user "clicks" the animation.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="play-listeners" type="content:listenersType">
                <xs:annotation>
                    <xs:documentation>event_ids that trigger playback of this animation.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="stop-listeners" type="content:listenersType">
                <xs:annotation>
                    <xs:documentation>event_ids that will stop playback of this animation.</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="button">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="content:textChild">
                    <xs:annotation>
                        <xs:documentation>The content:text child element is the text content of this button. The
                            text-align attribute for buttons defaults to center.
                        </xs:documentation>
                    </xs:annotation>
                    <xs:sequence>
                        <xs:element ref="analytics:events" minOccurs="0" maxOccurs="1">
                            <xs:annotation>
                                <xs:documentation>Define any analytics events that are triggered by this button. The
                                    default trigger mode for analytics events on buttons is "selected".
                                </xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="type" use="required">
                        <xs:annotation>
                            <xs:documentation>This attribute determines what type of button this is. Unrecognized button
                                types should be treated as unsupported by the renderer.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="event">
                                    <xs:annotation>
                                        <xs:documentation>"event" type buttons will trigger the events specified.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="url">
                                    <xs:annotation>
                                        <xs:documentation>"url" type buttons will launch the url specified.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="events" type="content:eventIdsType" use="optional">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the events to trigger for "event" buttons.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="url" type="content:uri" use="optional">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the url to open for "url" buttons.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="url-i18n-id" type="xs:string" use="optional">
                        <xs:annotation>
                            <xs:documentation>This attribute defines a OneSky phrase id that contains the url for this
                                button.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="style" default="contained">
                        <xs:annotation>
                            <xs:documentation>This attribute defines the style of the button. It defaults to "contained"
                                unless otherwise specified.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:simpleType>
                            <xs:restriction base="xs:string">
                                <xs:enumeration value="contained">
                                    <xs:annotation>
                                        <xs:documentation>This is a solid color button. The button color defines the
                                            solid color for this button. The button text-color defaults to the
                                            primary-text-color of the closest styles ancestor.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                                <xs:enumeration value="outlined">
                                    <xs:annotation>
                                        <xs:documentation>This is an outlined button. The button color defines the
                                            outline color for this button. The button text-color defaults to the
                                            color of this button.
                                        </xs:documentation>
                                    </xs:annotation>
                                </xs:enumeration>
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                    <xs:attribute name="color" type="content:colorValue" use="optional">
                        <xs:annotation>
                            <xs:documentation>This attribute determines the color of the button. This defaults to the
                                button-color of the closest ancestor element. If button-color is not defined in the
                                element hierarchy the color then defaults to the primary-color of the closest ancestor
                                element.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="background-color" type="content:colorValue" default="rgba(0,0,0,0)">
                        <xs:annotation>
                            <xs:documentation>This attribute determines the background color of outlined buttons. This
                                defaults to rgba(0,0,0,0).
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attributeGroup ref="content:baseAttributes" />
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- region multiselect -->
    <xs:element name="multiselect">
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:element name="option">
                    <xs:complexType>
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                            <xs:group ref="content:elements" />
                        </xs:choice>
                        <xs:attribute name="background-color" type="content:colorValue">
                            <xs:annotation>
                                <xs:documentation>This determines the default background color of Multiselect options.
                                    This defaults to the option-background-color of the multiselect element.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="selected-color" type="content:colorValue">
                            <xs:annotation>
                                <xs:documentation>This determines the selected color of this Option. This defaults to
                                    the Multiselect option-selected-color, or the primary color of the closest ancestor
                                    container with 100% alpha and the lightness of the HSL color space increased by 40%.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="value" type="xs:string" use="required" />
                    </xs:complexType>
                </xs:element>
            </xs:choice>
            <xs:attribute name="state" type="content:stateKey" use="required" />
            <xs:attribute name="selection-limit" default="1">
                <xs:simpleType>
                    <xs:restriction base="xs:int">
                        <xs:minInclusive value="1" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="option-background-color" type="content:colorValue">
                <xs:annotation>
                    <xs:documentation>This determines the default background color of options in this multiselect
                        element. This defaults to the multiselect-option-background-color defined on the closest
                        ancestor container.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="option-selected-color" type="content:colorValue">
                <xs:annotation>
                    <xs:documentation>This determines the default selected color of options in this multiselect element.
                        This defaults to the multiselect-option-selected-color defined on the closest ancestor
                        container.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
        <xs:unique name="optionValue">
            <xs:selector xpath="content:option" />
            <xs:field xpath="@value" />
        </xs:unique>
    </xs:element>

    <xs:attribute name="multiselect-option-background-color" type="content:colorValue" />
    <xs:attribute name="multiselect-option-selected-color" type="content:colorValue" />
    <!-- endregion multiselect -->

    <!-- Link -->
    <xs:complexType name="link">
        <xs:sequence>
            <xs:element ref="content:text">
                <xs:annotation>
                    <xs:documentation>This element is the text content of this link. The text-color attribute defaults
                        to the primary-color of the closest ancestor container.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element ref="analytics:events" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        Define any analytics events that are triggered by this link. The default trigger mode
                        for analytics events on links is "selected".
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <!-- events: events to fire when link is pressed. -->
        <xs:attribute name="events" type="content:eventIdsType" use="required" />
    </xs:complexType>

    <!--
        Form Content - vertical stacked content with input fields
    -->
    <xs:complexType name="form">
        <xs:annotation>
            <xs:documentation>This element wraps a collection of descendant input elements. Whenever a "followup:send"
                event is triggered by a descendant element the form will validate all descendant inputs and submit the
                data to the follow_ups endpoint on the mobile-content-api. If any descendant input fails to validate,
                the "followup:send" event and any other events triggered at the same time are prevented from firing.
            </xs:documentation>
        </xs:annotation>
        <xs:choice maxOccurs="unbounded">
            <xs:group ref="content:elements" />
            <xs:group ref="content:fixedSpacerOnly" />
        </xs:choice>
    </xs:complexType>

    <!--
        Input
            name:  REQUIRED - input key name
            type:  (text|email|phone|hidden) DEFAULT( text )
            value: OPTIONAL DEFAULT( empty_string )
    -->
    <xs:complexType name="input">
        <xs:all>
            <xs:element name="label" maxOccurs="1" minOccurs="0" type="content:textChild" />
            <xs:element name="placeholder" maxOccurs="1" minOccurs="0" type="content:textChild" />
        </xs:all>
        <xs:attribute name="name" type="xs:string" use="required" />
        <xs:attribute name="type" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="text" />
                    <xs:enumeration value="email" />
                    <xs:enumeration value="phone" />
                    <xs:enumeration value="hidden" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="required" type="xs:boolean" use="optional" default="false">
            <xs:annotation>
                <xs:documentation>Is this input required or not. A required field must contain at least one
                    non-whitespace character
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="value" type="xs:string" use="optional" />
    </xs:complexType>

    <xs:element name="fallback">
        <xs:annotation>
            <xs:documentation>This tag provides fallback rendering behavior. The renderer should render the first
                element that is supported and meets any specified content restrictions.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice maxOccurs="unbounded">
                <xs:group ref="content:elements" />
                <xs:group ref="content:fixedSpacerOnly" />
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <!-- region spacer -->
    <xs:element name="spacer">
        <xs:annotation>
            <xs:documentation>This tag can be used to vertically space content.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute name="mode" default="auto">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="auto">
                            <xs:annotation>
                                <xs:documentation>The renderer should evenly split any excess vertical whitespace
                                    between all spacer elements in a container that are using the auto mode.
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                        <xs:enumeration value="fixed">
                            <xs:annotation>
                                <xs:documentation>This element takes up vertical space specified by the height in
                                    density independent pixels
                                </xs:documentation>
                            </xs:annotation>
                        </xs:enumeration>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="height" default="0">
                <xs:annotation>
                    <xs:documentation>The height of this spacer</xs:documentation>
                </xs:annotation>
                <xs:simpleType>
                    <xs:restriction base="xs:int">
                        <xs:minInclusive value="0" />
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:group name="fixedSpacerOnly">
        <xs:choice>
            <xs:element name="spacer">
                <xs:complexType>
                    <xs:attribute name="mode" type="xs:string" use="required" fixed="fixed" />
                    <xs:attribute name="height" default="0">
                        <xs:simpleType>
                            <xs:restriction base="xs:int">
                                <xs:minInclusive value="0" />
                            </xs:restriction>
                        </xs:simpleType>
                    </xs:attribute>
                </xs:complexType>
            </xs:element>
        </xs:choice>
    </xs:group>
    <!-- endregion spacer -->

    <!-- region Exports -->
    <xs:element name="link" type="content:link" />
    <xs:element name="form" type="content:form" />
    <xs:element name="input" type="content:input" />
    <xs:group name="elements">
        <xs:choice>
            <xs:element ref="content:paragraph" />
            <xs:element ref="content:tabs" />
            <xs:element ref="content:accordion" />
            <xs:element ref="content:text" />
            <xs:element ref="content:image" />
            <xs:element ref="content:video" />
            <xs:element ref="content:animation" />
            <xs:element ref="content:button" />
            <xs:element ref="content:link" />
            <xs:element ref="content:multiselect" />
            <xs:element ref="content:form" />
            <xs:element ref="content:input" />
            <xs:element ref="content:fallback" />
            <xs:group ref="training:contentElements" />
        </xs:choice>
    </xs:group>

    <xs:attributeGroup name="page">
        <xs:attribute ref="content:multiselect-option-background-color">
            <xs:annotation>
                <xs:documentation>This defines the default multiselect option background color for this page. This
                    attribute defaults to the Manifest multiselect-option-background-color.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute ref="content:multiselect-option-selected-color">
            <xs:annotation>
                <xs:documentation>This defines the default multiselect option-selected-color for this page. This
                    attribute defaults to the Manifest multiselect-option-selected-color.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

    <xs:attributeGroup name="manifest">
        <xs:attribute ref="content:multiselect-option-background-color">
            <xs:annotation>
                <xs:documentation>This defines the default multiselect option background color for this tool. This
                    defaults to the Manifest background-color
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute ref="content:multiselect-option-selected-color">
            <xs:annotation>
                <xs:documentation>This defines the default multiselect option-selected-color for this tool.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>
    <!-- endregion Exports -->
</xs:schema>
